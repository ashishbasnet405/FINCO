{"version":3,"file":"static/js/241.e961139e.chunk.js","mappings":"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","sources":["axios/axiosinstance.js","globalfun/globalfun.js","views/offices/tables.js","views/offices/Office.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const fincoLogin = axios.create({\r\n    baseURL:\"http://finco360.com/\",\r\n    headers:{\r\n        'content-type': 'application/json',\r\n        'UserAgent':'WebAgent',\r\n        'X-TenantID':'finco3'\r\n    }\r\n})\r\n\r\nexport const fincoDefault = axios.create({\r\n    baseURL:\"http://finco360.com/\",\r\n    headers:{\r\n        'content-type': 'application/json',\r\n        'UserAgent':'WebAgent',\r\n        'X-TenantID':'finco3'\r\n    }\r\n})","import * as XLSX from \"xlsx\";\r\nimport jsPDF from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\n// import XlsxPopulate from \"xlsx-populate\";\r\nimport * as XlsxPopulate from \"xlsx-populate/browser/xlsx-populate\";\r\n\r\nconst alphabetList = [\r\n  \"A\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"I\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \"M\",\r\n  \"N\",\r\n  \"O\",\r\n  \"P\",\r\n  \"Q\",\r\n  \"R\",\r\n  \"S\",\r\n  \"T\",\r\n  \"U\",\r\n  \"V\",\r\n  \"W\",\r\n  \"X\",\r\n  \"Y\",\r\n  \"Z\",\r\n];\r\n\r\nexport const getToken = () => {\r\n  const data = JSON.parse(localStorage.getItem(\"fincoLoginDetails\"));\r\n  const token = data.token;\r\n  if (token) {\r\n    return token;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// export const downloadExcel = ({data,sheetName,fileName}) => {\r\n//     // const res = trans();\r\n//       if(data){\r\n//         const fileType =\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n\r\n//         //first create the worksheet\r\n//        const workSheet = XLSX.utils.json_to_sheet(data) //data may be the state\r\n\r\n//        //second create the workBook\r\n//        const workBook  = XLSX.utils.book_new()\r\n\r\n//        //third append the worksheet in work book with name\r\n//        XLSX.utils.book_append_sheet(workBook,workSheet,sheetName) //sheet name\r\n\r\n//        XLSX.utils.h\r\n\r\n//        //create a buffer to deal with bulk data\r\n//        let buf = XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\r\n\r\n//        //write a workbook data i.e. binary string\r\n//        XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\r\n\r\n//        //download a file\r\n//        XLSX.writeFile(workBook,fileName)\r\n//       }\r\n// }\r\n\r\nexport const downloadPdf = ({ data, pdfTitle, pdfName, columns }) => {\r\n  console.log(\"downloadPdf called\");\r\n\r\n  let doc = new jsPDF(\"p\", \"mm\", [430, 430]);\r\n\r\n  //create a pdf title\r\n  doc.text(pdfTitle, 15, 10);\r\n\r\n  //to insert a table\r\n  autoTable(doc, {\r\n    body: data,\r\n    columns: columns.map((col) => {\r\n      return { ...col, dataKey: col.field };\r\n    }),\r\n\r\n    //to draw a image\r\n    // didDrawCell: function(data) {\r\n    //         if (data.column.index === 3 && data.cell.section === 'body') {\r\n    //           console.log(\"data\",data)\r\n    //           var td = data.cell.raw;\r\n    //           var img = imgRef;\r\n    //           var dim = data.cell.height - data.cell.padding('vertical');\r\n    //           var textPos = data.cursor;\r\n    //           console.log(\"textpos\",textPos)\r\n    //           doc.addImage(\"https://images-na.ssl-images-amazon.com/images/M/MV5BMjA1MTc1NTg5NV5BMl5BanBnXkFtZTgwOTM2MDEzNzE@._V1_SX300.jpg\", textPos.x,  textPos.y, dim, dim);\r\n    //         }\r\n    //       }\r\n    theme: \"grid\",\r\n    columnStyles: {\r\n      0: { cellWidth: 10 },\r\n      1: { cellWidth: 25 },\r\n      2: { cellWidth: 20 },\r\n      3: { cellWidth: 25 },\r\n      4: { cellWidth: 25 },\r\n      5: { cellWidth: 30 },\r\n      6: { cellWidth: 25 },\r\n      7: { cellWidth: 25 },\r\n      8: { cellWidth: 25 }, //blood\r\n      9: { cellWidth: 25 },\r\n      10: { cellWidth: 25 }, //jobtype\r\n      11: { cellWidth: 22 },\r\n      12: { cellWidth: 20 }, //panno\r\n      13: { cellWidth: 22 },\r\n      14: { cellWidth: 20 },\r\n      15: { cellWidth: 20 },\r\n      16: { cellWidth: 30 },\r\n      17: { cellWidth: 20 },\r\n    },\r\n    styles: {\r\n      fontSize: 10,\r\n      theme: \"grid\",\r\n    },\r\n    headStyles: {\r\n      lineWidth: 0.5,\r\n      fontSize: 10,\r\n      fontStyle: \"bold\",\r\n      fillColor: \"#f9c46b\",\r\n      lineColor: \"#ffffff\",\r\n    },\r\n    bodyStyles: {\r\n      fillColor: \"#e3e3e3\",\r\n      lineWidth: 0.5,\r\n      lineColor: \"#ffffff\",\r\n    },\r\n  });\r\n\r\n  //save the doc with filename\r\n  doc.save(pdfName);\r\n};\r\n\r\nfunction addStyle(workbookBlob, dataInfo) {\r\n  return XlsxPopulate.fromDataAsync(workbookBlob).then((workbook) => {\r\n    workbook.sheets().forEach((sheet) => {\r\n      sheet.usedRange().style({\r\n        fontFamily: \"Arial\",\r\n        verticalAlignment: \"center\",\r\n      });\r\n\r\n      alphabetList.forEach((name) => {\r\n        sheet.column(name).width(18);\r\n      });\r\n\r\n      sheet.range(dataInfo.titleRange).merged(true).style({\r\n        bold: true,\r\n        horizontalAlignment: \"center\",\r\n        verticalAlignment: \"center\",\r\n      });\r\n\r\n      sheet.range(dataInfo.theadRange).style({\r\n        fill: \"edd2cb\",\r\n        bold: false,\r\n        horizontalAlignment: \"center\",\r\n      });\r\n\r\n      sheet.range(dataInfo.tbodyRange).style({\r\n        horizontalAlignment: \"left\",\r\n        fill: \"f1e8e6\",\r\n      });\r\n\r\n      sheet.range(dataInfo.tableRange).style({\r\n        border: {\r\n          style: \"thin\",\r\n          color: \"000000\",\r\n          direction: \"both\",\r\n        },\r\n      });\r\n    });\r\n\r\n    return workbook\r\n      .outputAsync()\r\n      .then((workbookBlob) => URL.createObjectURL(workbookBlob));\r\n  });\r\n}\r\n\r\nfunction handleExport({ finalData, columnLength }) {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n\r\n  //create a sheet\r\n  const workSheet = XLSX.utils.json_to_sheet(finalData, {\r\n    skipHeader: true,\r\n  });\r\n\r\n  //create a workbook\r\n  const workBook = XLSX.utils.book_new();\r\n\r\n  //append sheet to workbook\r\n  XLSX.utils.book_append_sheet(workBook, workSheet, \"Staff List\");\r\n\r\n  const excelBuffer = XLSX.write(workBook, { bookType: \"xlsx\", type: \"array\" });\r\n  const workbookBlob = new Blob([excelBuffer], { type: fileType });\r\n  const dataInfo = {\r\n    titleCell: \"A2\",\r\n    titleRange: `A1:B2`,\r\n\r\n    theadRange: `A3:${alphabetList[columnLength - 1]}3`, //table header from A3:S3\r\n    tbodyRange: `A4:${alphabetList[columnLength - 1]}${finalData.length}`, //table body from A4:S[total item]\r\n    tableRange: `A3:${alphabetList[columnLength - 1]}${finalData.length}`, //from table head A3:S[total item]\r\n  };\r\n  return addStyle(workbookBlob, dataInfo);\r\n}\r\n\r\nexport const downloadExcelPopulate = ({ data, sheetName, fileName }) => {\r\n  let columnKeys = [];\r\n  for (const keys in data[0]) {\r\n    columnKeys.push(keys);\r\n  }\r\n\r\n  const tableHead = {};\r\n  const table = [];\r\n  for (let i = 0; i < columnKeys.length; i++) {\r\n    const keys = alphabetList[i];\r\n    tableHead[keys] = columnKeys[i];\r\n  }\r\n  table.push(tableHead);\r\n\r\n  const title = [{ A: \"Details:\" }, {}];\r\n  const finalData = [...title, ...table];\r\n\r\n  let obj = {};\r\n  data.forEach((element, index) => {\r\n    for (let key in tableHead) {\r\n      const index = tableHead[key];\r\n      obj[key] = element[index];\r\n    }\r\n    finalData.push({ ...obj });\r\n  });\r\n\r\n  const res = {\r\n    finalData,\r\n    columnLength: columnKeys.length,\r\n    sheetName,\r\n  };\r\n\r\n  handleExport(res).then((url) => {\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", url);\r\n    downloadAnchorNode.setAttribute(\"download\", fileName);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  });\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport MaterialTable from \"@material-table/core\";\r\n\r\nimport { Icon } from \"@iconify/react\";\r\n\r\nimport { fincoDefault } from \"src/axios/axiosinstance\";\r\nimport { downloadExcelPopulate, downloadPdf } from \"../../globalfun/globalfun\";\r\nimport { CContainer } from \"@coreui/react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Tables = ({ data }) => {\r\n  const columns = [\r\n    { title: \"ID\", field: \"id\" },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Email\", field: \"email\" },\r\n    { title: \"Address\", field: \"address\" },\r\n    { title: \"Province\", field: \"province\" },\r\n    { title: \"PhoneNumber\", field: \"phoneNo\" },\r\n  ];\r\n\r\n  const excelData = {\r\n    data: data,\r\n    sheetName: \"Records\",\r\n    fileName: \"OfficeList.xlsx\",\r\n  };\r\n  const pdfData = {\r\n    data: data,\r\n    pdfTitle: \"Office Details:\",\r\n    pdfName: \"OfficeList.pdf\",\r\n    columns: columns,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CContainer className=\"p-2\">\r\n        <MaterialTable\r\n          title=\"Office Details\"\r\n          data={data}\r\n          columns={columns}\r\n          options={{\r\n            headerStyle: {\r\n              background: \"rgb(84,142,239)\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n              position: \"sticky\",\r\n              top: 0,\r\n            },\r\n            maxBodyHeight: \"650px\",\r\n            sorting: true,\r\n            columnsButton: true,\r\n            // searchFieldVariant:\"outlined\",\r\n            paginationType: \"stepped\",\r\n            showFirstLastPageButtons: false,\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: () => (\r\n                <Icon\r\n                  icon=\"mdi:file-excel\"\r\n                  width=\"25\"\r\n                  inline={true}\r\n                  id={1}\r\n                  color={\"green\"}\r\n                />\r\n              ),\r\n              tooltip: \"Export To Excel\",\r\n              isFreeAction: true,\r\n              onClick: (event) => {\r\n                downloadExcelPopulate(excelData);\r\n              },\r\n            },\r\n            {\r\n              icon: () => (\r\n                <Icon\r\n                  icon=\"mdi:file-pdf-box\"\r\n                  color={\"red\"}\r\n                  width=\"26\"\r\n                  id={1}\r\n                  inline={true}\r\n                />\r\n              ),\r\n              tooltip: \"Download as pdf\",\r\n              isFreeAction: true,\r\n              onClick: (event) => {\r\n                downloadPdf(pdfData);\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      </CContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","import { CContainer,CRow,CCol,CCard,CCardHeader,CCardBody,CCardTitle,CCardText } from '@coreui/react'\r\nimport React,{useState,useEffect} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { fincoDefault } from 'src/axios/axiosinstance'\r\nimport { getToken } from 'src/globalfun/globalfun'\r\nimport Tables from './tables'\r\nimport { Icon } from '@iconify/react';\r\n\r\n\r\nconst Office = () => {\r\n  const [data, setDatas] = useState([])\r\n  const token = getToken();\r\n  useEffect(()=>{\r\n       const getOffice = async()=>{\r\n           try{\r\n               const response = await fincoDefault.get(`/finco/api/auth/office/list`,{\r\n                                   headers:{\r\n                                       \"token\":`${token}`\r\n                                   }\r\n                                   }) \r\n               setDatas(response.data)\r\n           }catch(err){\r\n               console.log(err)\r\n           }\r\n       }\r\n       getOffice()\r\n  },[])\r\n\r\n  return (\r\n      <>\r\n          <CContainer>\r\n            <CRow>\r\n                <CCol xs=\"12\">\r\n                    <CCard style={{background:\"#60779f\"}}>\r\n                        <CCardHeader component=\"h5\" >\r\n                            <Icon icon=\"cil:library-building\" width=\"50\" height=\"30\" inline={true} className=\"text-white\"/>\r\n                             <span className='d-inline-block text-white'>\r\n                                Office Details\r\n                            </span>\r\n                        </CCardHeader>\r\n                          <CCardBody>\r\n                                <Tables data={data}/>\r\n                          </CCardBody>\r\n                      </CCard>\r\n                </CCol>\r\n            </CRow>\r\n          </CContainer>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Office"],"names":["fincoLogin","axios","baseURL","headers","fincoDefault","alphabetList","getToken","token","JSON","parse","localStorage","getItem","downloadPdf","data","pdfTitle","pdfName","columns","console","log","doc","jsPDF","text","autoTable","body","map","col","dataKey","field","theme","columnStyles","cellWidth","styles","fontSize","headStyles","lineWidth","fontStyle","fillColor","lineColor","bodyStyles","save","handleExport","finalData","columnLength","workSheet","XLSX","skipHeader","workBook","excelBuffer","bookType","type","workbookBlob","dataInfo","XlsxPopulate","then","workbook","sheets","forEach","sheet","usedRange","style","fontFamily","verticalAlignment","name","column","width","range","titleRange","merged","bold","horizontalAlignment","theadRange","fill","tbodyRange","tableRange","border","color","direction","outputAsync","URL","createObjectURL","addStyle","Blob","titleCell","length","downloadExcelPopulate","sheetName","fileName","columnKeys","keys","push","tableHead","table","i","A","obj","element","index","key","url","downloadAnchorNode","document","createElement","setAttribute","click","remove","title","excelData","pdfData","className","options","headerStyle","background","fontWeight","position","top","maxBodyHeight","sorting","columnsButton","paginationType","showFirstLastPageButtons","actions","icon","inline","id","tooltip","isFreeAction","onClick","event","useState","setDatas","useEffect","getOffice","response","xs","component","height"],"sourceRoot":""}