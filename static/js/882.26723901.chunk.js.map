{"version":3,"file":"static/js/882.26723901.chunk.js","mappings":"yPAEaA,EAAaC,IAAAA,OAAa,CACrCC,QAAS,uBACTC,QAAS,CACP,eAAgB,mBAChBC,UAAW,WACX,aAAc,YAILC,EAAeJ,IAAAA,OAAa,CACvCC,QAAS,uBACTC,QAAS,CACP,eAAgB,mBAChBC,UAAW,WACX,aAAc,a,0KCVZE,EAAe,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGWC,EAAW,WACtB,IACMC,EADOC,KAAKC,MAAMC,aAAaC,QAAQ,sBAC1BJ,MACnB,OAAIA,IAGK,GAIEK,EAAc,SAAC,GAA0C,IAEhEC,EAFwBC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACrDC,QAAQC,IAAI,qBAAsBF,IAGhCJ,EADEI,EAAQG,QAAU,EACd,IAAIC,EAAAA,QAEJ,IAAIA,EAAAA,QAAM,IAAK,KAAM,CAAC,IAAK,OAI/BC,KAAKP,EAAU,GAAI,IAGvBQ,GAAAA,CAAUV,EAAK,CACbW,KAAMV,EACNG,QAASA,EAAQQ,KAAI,SAACC,GACpB,OAAO,kBAAKA,GAAZ,IAAiBC,QAASD,EAAIE,WAgBhCC,MAAO,OAqBPC,OAAQ,CACNC,SAAU,GACVF,MAAO,QAETG,WAAY,CACVC,UAAW,GACXF,SAAU,GACVG,UAAW,OACXC,UAAW,UACXC,UAAW,WAEbC,WAAY,CACVF,UAAW,UACXF,UAAW,GACXG,UAAW,aAKfvB,EAAIyB,KAAKtB,IAyDX,SAASuB,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAK3BC,EAAYC,EAAAA,GAAAA,cAAyBH,EAAW,CACpDI,YAAY,IAIRC,EAAWF,EAAAA,GAAAA,WAGjBA,EAAAA,GAAAA,kBAA6BE,EAAUH,EAAW,cAElD,IAAMI,EAAcH,EAAAA,GAAWE,EAAU,CAAEE,SAAU,OAAQC,KAAM,UAUnE,OA/EF,SAAkBC,EAAcC,GAC9B,OAAOC,EAAAA,cAA2BF,GAAcG,MAAK,SAACC,GA+CpD,OA9CAA,EAASC,SAASC,SAAQ,SAACC,GACzBA,EAAMC,YAAYC,MAAM,CACtBC,WAAY,QACZC,kBAAmB,WAGrBvD,EAAakD,SAAQ,SAACM,GACpBL,EAAMM,OAAOD,GAAME,MAAM,OAG3BP,EACGQ,MAAMd,EAASe,YACfC,QAAO,GACPR,MAAM,CACLS,MAAM,EACNC,oBAAqB,OACrBR,kBAAmB,SACnBS,KAAM,SACNC,OAAQ,CACNZ,MAAO,OACPa,MAAO,YAIbf,EAAMQ,MAAMd,EAASsB,YAAYd,MAAM,CACrCW,KAAM,SACNF,MAAM,EACNC,oBAAqB,SACrBrC,SAAU,KAGZyB,EAAMQ,MAAMd,EAASuB,YAAYf,MAAM,CACrCU,oBAAqB,OACrBC,KAAM,SACNtC,SAAU,KAGZyB,EAAMQ,MAAMd,EAASwB,YAAYhB,MAAM,CACrCY,OAAQ,CACNZ,MAAO,OACPa,MAAO,SACPI,UAAW,aAKVtB,EACJuB,cACAxB,MAAK,SAACH,GAAD,OAAkB4B,IAAIC,gBAAgB7B,SA6BzC8B,CATc,IAAIC,KAAK,CAAClC,GAAc,CAAEE,KAd7C,oFAee,CACfiC,UAAW,KACXhB,WAAW,MAAD,OAAQ5D,EAAaoC,EAAe,GAApC,KAEV+B,WAAW,MAAD,OAAQnE,EAAaoC,EAAe,GAApC,KACVgC,WAAW,MAAD,OAAQpE,EAAaoC,EAAe,IAApC,OAAyCD,EAAUpB,QAC7DsD,WAAW,MAAD,OAAQrE,EAAaoC,EAAe,IAApC,OAAyCD,EAAUpB,UAK1D,IAAM8D,EAAwB,SAAC,GAAmC,IAAjCpE,EAAgC,EAAhCA,KAAMqE,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACnDC,EAAa,GACjB,IAAK,IAAMC,KAAQxE,EAAK,GACtBuE,EAAWE,KAAKD,GAKlB,IAFA,IAAME,EAAY,GACZC,EAAQ,GACLC,EAAI,EAAGA,EAAIL,EAAWjE,OAAQsE,IAAK,CAC1C,IAAMJ,EAAOjF,EAAaqF,GAC1BF,EAAUF,GAAQD,EAAWK,GAE/BD,EAAMF,KAAKC,GAEX,IACMhD,EAAS,UADD,CAAC,CAAEmD,EAAG,2BAA6B,IACjBF,GAE5BG,EAAM,GACV9E,EAAKyC,SAAQ,SAACsC,EAASC,GACrB,IAAK,IAAIC,KAAOP,EAAW,CACzB,IAAMM,EAAQN,EAAUO,GACxBH,EAAIG,GAAOF,EAAQC,GAErBtD,EAAU+C,MAAV,UAAoBK,OAStBrD,EANY,CACVC,UAAAA,EACAC,aAAc4C,EAAWjE,OACzB+D,UAAAA,IAGgB/B,MAAK,SAAC4C,GACtB,IAAMC,EAAqBC,SAASC,cAAc,KAClDF,EAAmBG,aAAa,OAAQJ,GACxCC,EAAmBG,aAAa,WAAYhB,GAC5Ca,EAAmBI,QACnBJ,EAAmBK,c,yMCrIvB,EAnGe,SAAC,GAAc,IAAZxF,EAAW,EAAXA,KACVG,EAAU,CACd,CAAEsF,MAAO,KAAM3E,MAAO,WACtB,CAAE2E,MAAO,YAAa3E,MAAO,aAC7B,CAAE2E,MAAO,WAAY3E,MAAO,YAC5B,CAAE2E,MAAO,OAAQ3E,MAAO,QACxB,CAAE2E,MAAO,MAAO3E,MAAO,OACvB,CAAE2E,MAAO,gBAAiB3E,MAAO,iBACjC,CAAE2E,MAAO,SAAU3E,MAAO,UAC1B,CAAE2E,MAAO,QAAS3E,MAAO,SACzB,CAAE2E,MAAO,aAAc3E,MAAO,cAC9B,CAAE2E,MAAO,WAAY3E,MAAO,YAC5B,CAAE2E,MAAO,UAAW3E,MAAO,WAC3B,CAAE2E,MAAO,aAAc3E,MAAO,cAC9B,CAAE2E,MAAO,QAAS3E,MAAO,SACzB,CAAE2E,MAAO,SAAU3E,MAAO,UAC1B,CAAE2E,MAAO,WAAY3E,MAAO,YAC5B,CAAE2E,MAAO,MAAO3E,MAAO,OACvB,CAAE2E,MAAO,OAAQ3E,MAAO,QACxB,CAAE2E,MAAO,SAAU3E,MAAO,WAGtB4E,EAAY,CAChB1F,KAAMA,EACNqE,UAAW,UACXC,SAAU,kBAENqB,EAAU,CACd3F,KAAMA,EACNC,SAAU,iBACVC,QAAS,gBACTC,QAASA,GAELyF,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaC,SAASjD,QAChE0C,EAAK,sBAAkBG,GAE7B,OACE,+BACE,SAAC,KAAD,CAAYK,UAAU,MAAtB,UACE,SAAC,KAAD,CACER,MAAOA,EACPzF,KAAMA,EACNG,QAASA,EACT+F,QAAS,CACPC,YAAa,CACXC,WAAY,kBACZ3C,MAAO,QACP4C,WAAY,OACZC,SAAU,SACVC,IAAK,GAEPC,cAAe,QACfC,SAAS,EACTC,eAAe,EAEfC,eAAgB,UAChBC,0BAA0B,GAE5BC,QAAS,CACP,CACEC,KAAM,kBACJ,SAAC,KAAD,CACEA,KAAK,iBACL7D,MAAM,KACN8D,QAAQ,EACRC,GAAI,EACJvD,MAAO,WAGXwD,QAAS,kBACTC,cAAc,EACdC,QAAS,SAACC,IAERhD,EAAAA,EAAAA,IAAsBsB,KAG1B,CACEoB,KAAM,kBACJ,SAAC,KAAD,CACEA,KAAK,mBACLrD,MAAO,MACPR,MAAM,KACN+D,GAAI,EACJD,QAAQ,KAGZE,QAAS,kBACTC,cAAc,EACdC,QAAS,SAACC,IACRtH,EAAAA,EAAAA,IAAY6F,a,sBC4C5B,EA1Hc,WACZ,OAAyB0B,EAAAA,EAAAA,UAAS,IAAlC,eAAOrH,EAAP,KAAasH,EAAb,KACA,GAAkCD,EAAAA,EAAAA,UAAS,IAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAgCH,EAAAA,EAAAA,UAAS,CACvCI,YAAa,GACbC,YAAa,KAFf,eAAO1B,EAAP,KAAiB2B,EAAjB,KAIMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUjC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaC,SAASgB,MAC7De,GAAWlC,EAAAA,EAAAA,KACf,SAACC,GAAD,uBAAWA,EAAMyB,UAAUvB,gBAA3B,aAAW,EAA0ByB,eAEjChI,GAAQD,EAAAA,EAAAA,MAkDd,OA3CAwI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,yCAAG,kHAEK3I,EAAAA,EAAAA,IAAiB,6BAA8B,CACpEF,QAAS,CAAEK,MAAM,GAAD,OAAKA,MAHL,OAEZyI,EAFY,OAKlBV,EAAaU,EAASlI,MACtB2H,EAAY,CACVF,YAAaS,EAASlI,KAAK,GAAGyH,YAC9BC,YAAaQ,EAASlI,KAAK,GAAG0H,cARd,gDAWlBS,MAAM,KAAID,SAASlI,KAAKoI,SAXN,yDAAH,qDAcnBH,MACC,KAEHD,EAAAA,EAAAA,YAAU,WACRJ,EAAS,CAAE1F,KAAM,eAAgB8D,SAAAA,MAChC,CAACA,KAEJgC,EAAAA,EAAAA,YAAU,WACR,IAAMK,EAAQ,yCAAG,kHAEU/I,EAAAA,EAAAA,IAAA,8CACkBwI,EADlB,qBAEnBC,GAAsB,GAExB,CACE3I,QAAS,CACPK,MAAM,GAAD,OAAKA,MARH,OAEPyI,EAFO,OAYbZ,EAASY,EAASlI,MAZL,gDAcbmI,MAAM,EAAD,IAdQ,yDAAH,qDAiBdE,MACC,CAACP,EAASC,KAGX,+BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMO,GAAG,KAAT,UACE,UAAC,KAAD,CAAO1F,MAAO,CAAEwD,WAAY,WAA5B,WACE,UAAC,KAAD,CAAamC,UAAU,KAAvB,WACE,SAAC,IAAD,CACEzB,KAAM0B,EAAAA,EACNC,gBAAgB,WAChBC,OAAQ,GACRzF,MAAO,GACPL,MAAO,CAAEa,MAAO,YAElB,iBAAMwC,UAAU,4BAAhB,+BAEF,UAAC,KAAD,YACE,iBACEA,UAAU,wCACVrD,MAAO,CACL+F,aAAc,MACdvC,WAAY,UACZ3C,MAAO,SALX,WAQE,SAAC,KAAD,CACEwC,UAAU,wBACVrD,MAAO,CAAE3B,SAAU,OAAQoF,WAAY,QAFzC,0BAOA,SAAC,KAAD,CACEuC,KAAK,KACLC,SAnFK,SAACC,GACtB,IAAMrB,EAAcqB,EAAEC,OAAOC,MAAMC,MAAM,MAAM,GACzCvB,EAAcoB,EAAEC,OAAOC,MAAMC,MAAM,MAAM,GAC/CtB,GAAY,kBAAK3B,GAAN,IAAgByB,YAAAA,EAAaC,YAAAA,MAiFxBzB,UAAU,OAHZ,SAKGsB,EAAU5G,KAAI,SAACoE,GACd,IAAQ0C,EAA6B1C,EAA7B0C,YAAaC,EAAgB3C,EAAhB2C,YACrB,OACE,mBACEsB,MAAK,UAAKvB,EAAL,aAAqBC,GAD5B,SAIGA,GAFID,YAQf,SAAC,EAAD,CAAOzH,KAAMA,EAAMkJ,KAAM3B","sources":["axios/axiosinstance.js","globalfun/globalfun.js","views/staff/table.js","views/staff/Staff.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const fincoLogin = axios.create({\n  baseURL: \"http://finco360.com/\",\n  headers: {\n    \"content-type\": \"application/json\",\n    UserAgent: \"WebAgent\",\n    \"X-TenantID\": \"finco3\",\n  },\n});\n\nexport const fincoDefault = axios.create({\n  baseURL: \"http://finco360.com/\",\n  headers: {\n    \"content-type\": \"application/json\",\n    UserAgent: \"WebAgent\",\n    \"X-TenantID\": \"finco3\",\n  },\n});\n","import * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n// import XlsxPopulate from \"xlsx-populate\";\nimport * as XlsxPopulate from \"xlsx-populate/browser/xlsx-populate\";\n\nconst alphabetList = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\nexport const getToken = () => {\n  const data = JSON.parse(localStorage.getItem(\"fincoLoginDetails\"));\n  const token = data.token;\n  if (token) {\n    return token;\n  } else {\n    return false;\n  }\n};\n\nexport const downloadPdf = ({ data, pdfTitle, pdfName, columns }) => {\n  console.log(\"downloadPdf called\", columns);\n  let doc;\n  if (columns.length <= 7) {\n    doc = new jsPDF();\n  } else {\n    doc = new jsPDF(\"p\", \"mm\", [430, 430]);\n  }\n\n  //create a pdf title\n  doc.text(pdfTitle, 15, 10);\n\n  //to insert a table\n  autoTable(doc, {\n    body: data,\n    columns: columns.map((col) => {\n      return { ...col, dataKey: col.field };\n    }),\n\n    //to draw a image\n    // didDrawCell: function(data) {\n    //         if (data.column.index === 3 && data.cell.section === 'body') {\n    //           console.log(\"data\",data)\n    //           var td = data.cell.raw;\n    //           var img = imgRef;\n    //           var dim = data.cell.height - data.cell.padding('vertical');\n    //           var textPos = data.cursor;\n    //           console.log(\"textpos\",textPos)\n    //           doc.addImage(\"https://images-na.ssl-images-amazon.com/images/M/MV5BMjA1MTc1NTg5NV5BMl5BanBnXkFtZTgwOTM2MDEzNzE@._V1_SX300.jpg\", textPos.x,  textPos.y, dim, dim);\n    //         }\n    //       }\n\n    theme: \"grid\",\n    // columnStyles: {\n    //   0: { cellWidth: 10 },\n    //   1: { cellWidth: 25 },\n    //   2: { cellWidth: 20 },\n    //   3: { cellWidth: 25 },\n    //   4: { cellWidth: 25 },\n    //   5: { cellWidth: 30 },\n    //   6: { cellWidth: 25 },\n    //   7: { cellWidth: 25 },\n    //   8: { cellWidth: 25 }, //blood\n    //   9: { cellWidth: 25 },\n    //   10: { cellWidth: 25 }, //jobtype\n    //   11: { cellWidth: 22 },\n    //   12: { cellWidth: 20 }, //panno\n    //   13: { cellWidth: 22 },\n    //   14: { cellWidth: 20 },\n    //   15: { cellWidth: 20 },\n    //   16: { cellWidth: 30 },\n    //   17: { cellWidth: 20 },\n    // },\n    styles: {\n      fontSize: 10,\n      theme: \"grid\",\n    },\n    headStyles: {\n      lineWidth: 0.5,\n      fontSize: 10,\n      fontStyle: \"bold\",\n      fillColor: \"#f9c46b\",\n      lineColor: \"#ffffff\",\n    },\n    bodyStyles: {\n      fillColor: \"#e3e3e3\",\n      lineWidth: 0.5,\n      lineColor: \"#ffffff\",\n    },\n  });\n\n  //save the doc with filename\n  doc.save(pdfName);\n};\n\nfunction addStyle(workbookBlob, dataInfo) {\n  return XlsxPopulate.fromDataAsync(workbookBlob).then((workbook) => {\n    workbook.sheets().forEach((sheet) => {\n      sheet.usedRange().style({\n        fontFamily: \"Arial\",\n        verticalAlignment: \"center\",\n      });\n\n      alphabetList.forEach((name) => {\n        sheet.column(name).width(18);\n      });\n\n      sheet\n        .range(dataInfo.titleRange)\n        .merged(true)\n        .style({\n          bold: true,\n          horizontalAlignment: \"left\",\n          verticalAlignment: \"center\",\n          fill: \"dee0e6\",\n          border: {\n            style: \"bold\",\n            color: \"000000\",\n          },\n        });\n\n      sheet.range(dataInfo.theadRange).style({\n        fill: \"edd2cb\",\n        bold: false,\n        horizontalAlignment: \"center\",\n        fontSize: 14,\n      });\n\n      sheet.range(dataInfo.tbodyRange).style({\n        horizontalAlignment: \"left\",\n        fill: \"f1e8e6\",\n        fontSize: 10,\n      });\n\n      sheet.range(dataInfo.tableRange).style({\n        border: {\n          style: \"thin\",\n          color: \"000000\",\n          direction: \"both\",\n        },\n      });\n    });\n\n    return workbook\n      .outputAsync()\n      .then((workbookBlob) => URL.createObjectURL(workbookBlob));\n  });\n}\n\nfunction handleExport({ finalData, columnLength }) {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n\n  //create a sheet\n  const workSheet = XLSX.utils.json_to_sheet(finalData, {\n    skipHeader: true,\n  });\n\n  //create a workbook\n  const workBook = XLSX.utils.book_new();\n\n  //append sheet to workbook\n  XLSX.utils.book_append_sheet(workBook, workSheet, \"Staff List\");\n\n  const excelBuffer = XLSX.write(workBook, { bookType: \"xlsx\", type: \"array\" });\n  const workbookBlob = new Blob([excelBuffer], { type: fileType });\n  const dataInfo = {\n    titleCell: \"A2\",\n    titleRange: `A1:${alphabetList[columnLength - 1]}2`,\n\n    theadRange: `A3:${alphabetList[columnLength - 1]}3`, //table header from A3:S3\n    tbodyRange: `A4:${alphabetList[columnLength - 1]}${finalData.length}`, //table body from A4:S[total item]\n    tableRange: `A3:${alphabetList[columnLength - 1]}${finalData.length}`, //from table head A3:S[total item]\n  };\n  return addStyle(workbookBlob, dataInfo);\n}\n\nexport const downloadExcelPopulate = ({ data, sheetName, fileName }) => {\n  let columnKeys = [];\n  for (const keys in data[0]) {\n    columnKeys.push(keys);\n  }\n\n  const tableHead = {};\n  const table = [];\n  for (let i = 0; i < columnKeys.length; i++) {\n    const keys = alphabetList[i];\n    tableHead[keys] = columnKeys[i];\n  }\n  table.push(tableHead);\n\n  const title = [{ A: \"Unique Cooperative Ltd.\" }, {}];\n  const finalData = [...title, ...table];\n\n  let obj = {};\n  data.forEach((element, index) => {\n    for (let key in tableHead) {\n      const index = tableHead[key];\n      obj[key] = element[index];\n    }\n    finalData.push({ ...obj });\n  });\n\n  const res = {\n    finalData,\n    columnLength: columnKeys.length,\n    sheetName,\n  };\n\n  handleExport(res).then((url) => {\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", url);\n    downloadAnchorNode.setAttribute(\"download\", fileName);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  });\n};\n\nexport const tablePrint = () => {\n  console.log(\"table print called\");\n  window.print();\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport MaterialTable from \"@material-table/core\";\nimport { Icon } from \"@iconify/react\";\nimport { fincoDefault } from \"src/axios/axiosinstance\";\nimport { downloadPdf, downloadExcelPopulate } from \"../../globalfun/globalfun\";\nimport { useSelector } from \"react-redux\";\nimport { CContainer, CFormLabel } from \"@coreui/react\";\nconst Tables = ({ data }) => {\n  const columns = [\n    { title: \"Id\", field: \"StaffId\" },\n    { title: \"FirstName\", field: \"Firstname\" },\n    { title: \"LastName\", field: \"Lastname\" },\n    { title: \"Code\", field: \"Code\" },\n    { title: \"Dob\", field: \"Dob\" },\n    { title: \"MaritalStatus\", field: \"MaritalStatus\" },\n    { title: \"Mobile\", field: \"Mobile\" },\n    { title: \"Email\", field: \"Email\" },\n    { title: \"BloodGroup\", field: \"BloodGroup\" },\n    { title: \"JoinDate\", field: \"JoinDate\" },\n    { title: \"JobType\", field: \"JobType\" },\n    { title: \"StaffGroup\", field: \"StaffGroup\" },\n    { title: \"PanNo\", field: \"PanNo\" },\n    { title: \"Gender\", field: \"Gender\" },\n    { title: \"District\", field: \"District\" },\n    { title: \"Vdc\", field: \"Vdc\" },\n    { title: \"Tole\", field: \"Tole\" },\n    { title: \"WardNo\", field: \"WardNo\" },\n  ];\n\n  const excelData = {\n    data: data,\n    sheetName: \"Records\",\n    fileName: \"StaffList.xlsx\",\n  };\n  const pdfData = {\n    data: data,\n    pdfTitle: \"Staff Details:\",\n    pdfName: \"StaffList.pdf\",\n    columns: columns,\n  };\n  const officeName = useSelector((state) => state.dropDownData.selected.name);\n  const title = `Office Name:${officeName}`;\n\n  return (\n    <>\n      <CContainer className=\"p-2\">\n        <MaterialTable\n          title={title}\n          data={data}\n          columns={columns}\n          options={{\n            headerStyle: {\n              background: \"rgb(84,142,239)\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              position: \"sticky\",\n              top: 0,\n            },\n            maxBodyHeight: \"650px\",\n            sorting: true,\n            columnsButton: true,\n            // searchFieldVariant:\"outlined\",\n            paginationType: \"stepped\",\n            showFirstLastPageButtons: true,\n          }}\n          actions={[\n            {\n              icon: () => (\n                <Icon\n                  icon=\"mdi:file-excel\"\n                  width=\"20\"\n                  inline={true}\n                  id={1}\n                  color={\"green\"}\n                />\n              ),\n              tooltip: \"Export To Excel\",\n              isFreeAction: true,\n              onClick: (event) => {\n                // downloadExcel(excelData)\n                downloadExcelPopulate(excelData);\n              },\n            },\n            {\n              icon: () => (\n                <Icon\n                  icon=\"mdi:file-pdf-box\"\n                  color={\"red\"}\n                  width=\"20\"\n                  id={1}\n                  inline={true}\n                />\n              ),\n              tooltip: \"Download as pdf\",\n              isFreeAction: true,\n              onClick: (event) => {\n                downloadPdf(pdfData);\n              },\n            },\n          ]}\n        />\n      </CContainer>\n    </>\n  );\n};\n\nexport default Tables;\n","import {\n  CContainer,\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CFormLabel,\n  CFormSelect,\n} from \"@coreui/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { fincoDefault } from \"src/axios/axiosinstance\";\nimport { getToken } from \"src/globalfun/globalfun\";\nimport Table from \"./table\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilUser } from \"@coreui/icons\";\n\nconst Staff = () => {\n  const [data, setDatas] = useState([]);\n  const [jobStatus, setJobStatus] = useState([]);\n  const [selected, setSelected] = useState({\n    JobStatusID: \"\",\n    Description: \"\",\n  });\n  const dispatch = useDispatch();\n  const staffId = useSelector((state) => state.dropDownData.selected.id);\n  const statusId = useSelector(\n    (state) => state.jobStatus.selected?.JobStatusID\n  );\n  const token = getToken();\n  const handleDropDown = (e) => {\n    const JobStatusID = e.target.value.split(\"!!\")[0];\n    const Description = e.target.value.split(\"!!\")[1];\n    setSelected({ ...selected, JobStatusID, Description });\n  };\n\n  useEffect(() => {\n    const getJobDetails = async () => {\n      try {\n        const response = await fincoDefault.get(\"/finco/api/job/status/list\", {\n          headers: { token: `${token}` },\n        });\n        setJobStatus(response.data);\n        setSelected({\n          JobStatusID: response.data[0].JobStatusID,\n          Description: response.data[0].Description,\n        });\n      } catch (err) {\n        alert(err.response.data.message);\n      }\n    };\n    getJobDetails();\n  }, []);\n\n  useEffect(() => {\n    dispatch({ type: \"getJobStatus\", selected });\n  }, [selected]);\n\n  useEffect(() => {\n    const getStaff = async () => {\n      try {\n        const response = await fincoDefault.get(\n          `/finco/api/auth/staff/list?officeId=${staffId}&statusId=${\n            statusId ? statusId : 1\n          }`,\n          {\n            headers: {\n              token: `${token}`,\n            },\n          }\n        );\n        setDatas(response.data);\n      } catch (err) {\n        alert(err);\n      }\n    };\n    getStaff();\n  }, [staffId, statusId]);\n\n  return (\n    <>\n      <CContainer>\n        <CRow>\n          <CCol xs=\"12\">\n            <CCard style={{ background: \"#60779f\" }}>\n              <CCardHeader component=\"h5\">\n                <CIcon\n                  icon={cilUser}\n                  customClassName=\"nav-icon\"\n                  height={30}\n                  width={50}\n                  style={{ color: \"white\" }}\n                />\n                <span className=\"d-inline-block text-white\">Staff Details</span>\n              </CCardHeader>\n              <CCardBody>\n                <div\n                  className=\"m-1 p-2 d-flex justify-content-center\"\n                  style={{\n                    borderRadius: \"5px\",\n                    background: \"#1a3eb4\",\n                    color: \"white\",\n                  }}\n                >\n                  <CFormLabel\n                    className=\"form-label pt-2 px-2 \"\n                    style={{ fontSize: \"1rem\", fontWeight: \"bold\" }}\n                  >\n                    Job status:\n                  </CFormLabel>\n\n                  <CFormSelect\n                    size=\"sm\"\n                    onChange={handleDropDown}\n                    className=\"w-25\"\n                  >\n                    {jobStatus.map((element) => {\n                      const { JobStatusID, Description } = element;\n                      return (\n                        <option\n                          value={`${JobStatusID}!!${Description}`}\n                          key={JobStatusID}\n                        >\n                          {Description}\n                        </option>\n                      );\n                    })}\n                  </CFormSelect>\n                </div>\n                <Table data={data} jobs={jobStatus} />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </>\n  );\n};\n\nexport default Staff;\n"],"names":["fincoLogin","axios","baseURL","headers","UserAgent","fincoDefault","alphabetList","getToken","token","JSON","parse","localStorage","getItem","downloadPdf","doc","data","pdfTitle","pdfName","columns","console","log","length","jsPDF","text","autoTable","body","map","col","dataKey","field","theme","styles","fontSize","headStyles","lineWidth","fontStyle","fillColor","lineColor","bodyStyles","save","handleExport","finalData","columnLength","workSheet","XLSX","skipHeader","workBook","excelBuffer","bookType","type","workbookBlob","dataInfo","XlsxPopulate","then","workbook","sheets","forEach","sheet","usedRange","style","fontFamily","verticalAlignment","name","column","width","range","titleRange","merged","bold","horizontalAlignment","fill","border","color","theadRange","tbodyRange","tableRange","direction","outputAsync","URL","createObjectURL","addStyle","Blob","titleCell","downloadExcelPopulate","sheetName","fileName","columnKeys","keys","push","tableHead","table","i","A","obj","element","index","key","url","downloadAnchorNode","document","createElement","setAttribute","click","remove","title","excelData","pdfData","officeName","useSelector","state","dropDownData","selected","className","options","headerStyle","background","fontWeight","position","top","maxBodyHeight","sorting","columnsButton","paginationType","showFirstLastPageButtons","actions","icon","inline","id","tooltip","isFreeAction","onClick","event","useState","setDatas","jobStatus","setJobStatus","JobStatusID","Description","setSelected","dispatch","useDispatch","staffId","statusId","useEffect","getJobDetails","response","alert","message","getStaff","xs","component","cilUser","customClassName","height","borderRadius","size","onChange","e","target","value","split","jobs"],"sourceRoot":""}