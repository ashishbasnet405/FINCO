{"version":3,"file":"static/js/882.6d96ce61.chunk.js","mappings":"yPAEaA,EAAaC,IAAAA,OAAa,CACnCC,QAAQ,uBACRC,QAAQ,CACJ,eAAgB,mBAChB,UAAY,WACZ,aAAa,YAIRC,EAAeH,IAAAA,OAAa,CACrCC,QAAQ,uBACRC,QAAQ,CACJ,eAAgB,mBAChB,UAAY,WACZ,aAAa,a,0KCVfE,EAAe,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGWC,EAAW,WACtB,IACMC,EADOC,KAAKC,MAAMC,aAAaC,QAAQ,sBAC1BJ,MACnB,OAAIA,IAGK,GA+BEK,EAAc,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACrDC,QAAQC,IAAI,sBAEZ,IAAIC,EAAM,IAAIC,EAAAA,QAAM,IAAK,KAAM,CAAC,IAAK,MAGrCD,EAAIE,KAAKP,EAAU,GAAI,IAGvBQ,GAAAA,CAAUH,EAAK,CACbI,KAAMV,EACNG,QAASA,EAAQQ,KAAI,SAACC,GACpB,OAAO,kBAAKA,GAAZ,IAAiBC,QAASD,EAAIE,WAehCC,MAAO,OACPC,aAAc,CACZ,EAAG,CAAEC,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,EAAG,CAAEA,UAAW,IAChB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,IACjB,GAAI,CAAEA,UAAW,KAEnBC,OAAQ,CACNC,SAAU,GACVJ,MAAO,QAETK,WAAY,CACVC,UAAW,GACXF,SAAU,GACVG,UAAW,OACXC,UAAW,UACXC,UAAW,WAEbC,WAAY,CACVF,UAAW,UACXF,UAAW,GACXG,UAAW,aAKflB,EAAIoB,KAAKxB,IA+CX,SAASyB,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAK3BC,EAAYC,EAAAA,GAAAA,cAAyBH,EAAW,CACpDI,YAAY,IAIRC,EAAWF,EAAAA,GAAAA,WAGjBA,EAAAA,GAAAA,kBAA6BE,EAAUH,EAAW,cAElD,IAAMI,EAAcH,EAAAA,GAAWE,EAAU,CAAEE,SAAU,OAAQC,KAAM,UAUnE,OArEF,SAAkBC,EAAcC,GAC9B,OAAOC,EAAAA,cAA2BF,GAAcG,MAAK,SAACC,GAqCpD,OApCAA,EAASC,SAASC,SAAQ,SAACC,GACzBA,EAAMC,YAAYC,MAAM,CACtBC,WAAY,QACZC,kBAAmB,WAGrBxD,EAAamD,SAAQ,SAACM,GACpBL,EAAMM,OAAOD,GAAME,MAAM,OAG3BP,EAAMQ,MAAMd,EAASe,YAAYC,QAAO,GAAMR,MAAM,CAClDS,MAAM,EACNC,oBAAqB,SACrBR,kBAAmB,WAGrBJ,EAAMQ,MAAMd,EAASmB,YAAYX,MAAM,CACrCY,KAAM,SACNH,MAAM,EACNC,oBAAqB,WAGvBZ,EAAMQ,MAAMd,EAASqB,YAAYb,MAAM,CACrCU,oBAAqB,OACrBE,KAAM,WAGRd,EAAMQ,MAAMd,EAASsB,YAAYd,MAAM,CACrCe,OAAQ,CACNf,MAAO,OACPgB,MAAO,SACPC,UAAW,aAKVtB,EACJuB,cACAxB,MAAK,SAACH,GAAD,OAAkB4B,IAAIC,gBAAgB7B,SA6BzC8B,CATc,IAAIC,KAAK,CAAClC,GAAc,CAAEE,KAd7C,oFAee,CACfiC,UAAW,KACXhB,WAAW,QAEXI,WAAW,MAAD,OAAQjE,EAAaqC,EAAe,GAApC,KACV8B,WAAW,MAAD,OAAQnE,EAAaqC,EAAe,IAApC,OAAyCD,EAAU0C,QAC7DV,WAAW,MAAD,OAAQpE,EAAaqC,EAAe,IAApC,OAAyCD,EAAU0C,UAK1D,IAAMC,EAAwB,SAAC,GAAmC,IAAjCvE,EAAgC,EAAhCA,KAAMwE,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACnDC,EAAa,GACjB,IAAK,IAAMC,KAAQ3E,EAAK,GACtB0E,EAAWE,KAAKD,GAKlB,IAFA,IAAME,EAAY,GACZC,EAAQ,GACLC,EAAI,EAAGA,EAAIL,EAAWJ,OAAQS,IAAK,CAC1C,IAAMJ,EAAOnF,EAAauF,GAC1BF,EAAUF,GAAQD,EAAWK,GAE/BD,EAAMF,KAAKC,GAEX,IACMjD,EAAS,UADD,CAAC,CAAEoD,EAAG,YAAc,IACFF,GAE5BG,EAAM,GACVjF,EAAK2C,SAAQ,SAACuC,EAASC,GACrB,IAAK,IAAIC,KAAOP,EAAW,CACzB,IAAMM,EAAQN,EAAUO,GACxBH,EAAIG,GAAOF,EAAQC,GAErBvD,EAAUgD,MAAV,UAAoBK,OAStBtD,EANY,CACVC,UAAAA,EACAC,aAAc6C,EAAWJ,OACzBE,UAAAA,IAGgBhC,MAAK,SAAC6C,GACtB,IAAMC,EAAqBC,SAASC,cAAc,KAClDF,EAAmBG,aAAa,OAAQJ,GACxCC,EAAmBG,aAAa,WAAYhB,GAC5Ca,EAAmBI,QACnBJ,EAAmBK,c,+LCjJvB,EAnGe,SAAC,GAAc,IAAZ3F,EAAW,EAAXA,KACVG,EAAU,CACd,CAAEyF,MAAO,KAAM9E,MAAO,WACtB,CAAE8E,MAAO,YAAa9E,MAAO,aAC7B,CAAE8E,MAAO,WAAY9E,MAAO,YAC5B,CAAE8E,MAAO,OAAQ9E,MAAO,QACxB,CAAE8E,MAAO,MAAO9E,MAAO,OACvB,CAAE8E,MAAO,gBAAiB9E,MAAO,iBACjC,CAAE8E,MAAO,SAAU9E,MAAO,UAC1B,CAAE8E,MAAO,QAAS9E,MAAO,SACzB,CAAE8E,MAAO,aAAc9E,MAAO,cAC9B,CAAE8E,MAAO,WAAY9E,MAAO,YAC5B,CAAE8E,MAAO,UAAW9E,MAAO,WAC3B,CAAE8E,MAAO,aAAc9E,MAAO,cAC9B,CAAE8E,MAAO,QAAS9E,MAAO,SACzB,CAAE8E,MAAO,SAAU9E,MAAO,UAC1B,CAAE8E,MAAO,WAAY9E,MAAO,YAC5B,CAAE8E,MAAO,MAAO9E,MAAO,OACvB,CAAE8E,MAAO,OAAQ9E,MAAO,QACxB,CAAE8E,MAAO,SAAU9E,MAAO,WAGtB+E,EAAY,CAChB7F,KAAMA,EACNwE,UAAW,UACXC,SAAU,kBAENqB,EAAU,CACd9F,KAAMA,EACNC,SAAU,iBACVC,QAAS,gBACTC,QAASA,GAEL4F,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaC,SAASlD,QAChE2C,EAAK,sBAAkBG,GAE7B,OACE,+BACE,SAAC,KAAD,CAAYK,UAAU,MAAtB,UACE,SAAC,KAAD,CACER,MAAOA,EACP5F,KAAMA,EACNG,QAASA,EACTkG,QAAS,CACPC,YAAa,CACXC,WAAY,kBACZzC,MAAO,QACP0C,WAAY,OACZC,SAAU,SACVC,IAAK,GAEPC,cAAe,QACfC,SAAS,EACTC,eAAe,EAEfC,eAAgB,UAChBC,0BAA0B,GAE5BC,QAAS,CACP,CACEC,KAAM,kBACJ,SAAC,KAAD,CACEA,KAAK,iBACL9D,MAAM,KACN+D,QAAQ,EACRC,GAAI,EACJrD,MAAO,WAGXsD,QAAS,kBACTC,cAAc,EACdC,QAAS,SAACC,IAERhD,EAAAA,EAAAA,IAAsBsB,KAG1B,CACEoB,KAAM,kBACJ,SAAC,KAAD,CACEA,KAAK,mBACLnD,MAAO,MACPX,MAAM,KACNgE,GAAI,EACJD,QAAQ,KAGZE,QAAS,kBACTC,cAAc,EACdC,QAAS,SAACC,IACRxH,EAAAA,EAAAA,IAAY+F,a,sBCxB5B,EAtDc,WACZ,OAAyB0B,EAAAA,EAAAA,UAAS,IAAlC,eAAOxH,EAAP,KAAayH,EAAb,KACMC,GAAU1B,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaC,SAASgB,MAC7DzH,GAAQD,EAAAA,EAAAA,MAuBd,OApBAkI,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAQ,yCAAG,kHAEUrI,EAAAA,EAAAA,IAAA,8CACkBmI,EADlB,eAErB,CACEpI,QAAS,CACPI,MAAM,GAAD,OAAKA,MANH,OAEPmI,EAFO,OAUbJ,EAASI,EAAS7H,MAVL,gDAYbI,QAAQC,IAAR,MAZa,yDAAH,qDAeduH,MACC,CAACF,KAGF,+BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAMI,GAAG,KAAT,UACE,UAAC,KAAD,CAAOhF,MAAO,CAAEyD,WAAY,WAA5B,WACE,UAAC,KAAD,CAAawB,UAAU,KAAvB,WAEE,SAAC,IAAD,CACEd,KAAMe,EAAAA,EACNC,gBAAgB,WAChBC,OAAQ,GACR/E,MAAO,GACPL,MAAO,CAAEgB,MAAO,YAElB,iBAAMsC,UAAU,4BAAhB,+BAEF,SAAC,KAAD,WACE,SAAC,EAAD,CAAOpG,KAAMA","sources":["axios/axiosinstance.js","globalfun/globalfun.js","views/staff/table.js","views/staff/Staff.js"],"sourcesContent":["import axios from 'axios';\n\nexport const fincoLogin = axios.create({\n    baseURL:\"http://finco360.com/\",\n    headers:{\n        'content-type': 'application/json',\n        'UserAgent':'WebAgent',\n        'X-TenantID':'finco3'\n    }\n})\n\nexport const fincoDefault = axios.create({\n    baseURL:\"http://finco360.com/\",\n    headers:{\n        'content-type': 'application/json',\n        'UserAgent':'WebAgent',\n        'X-TenantID':'finco3'\n    }\n})","import * as XLSX from \"xlsx\";\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n// import XlsxPopulate from \"xlsx-populate\";\nimport * as XlsxPopulate from \"xlsx-populate/browser/xlsx-populate\";\n\nconst alphabetList = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\nexport const getToken = () => {\n  const data = JSON.parse(localStorage.getItem(\"fincoLoginDetails\"));\n  const token = data.token;\n  if (token) {\n    return token;\n  } else {\n    return false;\n  }\n};\n\n// export const downloadExcel = ({data,sheetName,fileName}) => {\n//     // const res = trans();\n//       if(data){\n//         const fileType =\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n\n//         //first create the worksheet\n//        const workSheet = XLSX.utils.json_to_sheet(data) //data may be the state\n\n//        //second create the workBook\n//        const workBook  = XLSX.utils.book_new()\n\n//        //third append the worksheet in work book with name\n//        XLSX.utils.book_append_sheet(workBook,workSheet,sheetName) //sheet name\n\n//        XLSX.utils.h\n\n//        //create a buffer to deal with bulk data\n//        let buf = XLSX.write(workBook,{bookType:\"xlsx\",type:\"buffer\"})\n\n//        //write a workbook data i.e. binary string\n//        XLSX.write(workBook,{bookType:\"xlsx\",type:\"binary\"})\n\n//        //download a file\n//        XLSX.writeFile(workBook,fileName)\n//       }\n// }\n\nexport const downloadPdf = ({ data, pdfTitle, pdfName, columns }) => {\n  console.log(\"downloadPdf called\");\n\n  let doc = new jsPDF(\"p\", \"mm\", [430, 430]);\n\n  //create a pdf title\n  doc.text(pdfTitle, 15, 10);\n\n  //to insert a table\n  autoTable(doc, {\n    body: data,\n    columns: columns.map((col) => {\n      return { ...col, dataKey: col.field };\n    }),\n\n    //to draw a image\n    // didDrawCell: function(data) {\n    //         if (data.column.index === 3 && data.cell.section === 'body') {\n    //           console.log(\"data\",data)\n    //           var td = data.cell.raw;\n    //           var img = imgRef;\n    //           var dim = data.cell.height - data.cell.padding('vertical');\n    //           var textPos = data.cursor;\n    //           console.log(\"textpos\",textPos)\n    //           doc.addImage(\"https://images-na.ssl-images-amazon.com/images/M/MV5BMjA1MTc1NTg5NV5BMl5BanBnXkFtZTgwOTM2MDEzNzE@._V1_SX300.jpg\", textPos.x,  textPos.y, dim, dim);\n    //         }\n    //       }\n    theme: \"grid\",\n    columnStyles: {\n      0: { cellWidth: 10 },\n      1: { cellWidth: 25 },\n      2: { cellWidth: 20 },\n      3: { cellWidth: 25 },\n      4: { cellWidth: 25 },\n      5: { cellWidth: 30 },\n      6: { cellWidth: 25 },\n      7: { cellWidth: 25 },\n      8: { cellWidth: 25 }, //blood\n      9: { cellWidth: 25 },\n      10: { cellWidth: 25 }, //jobtype\n      11: { cellWidth: 22 },\n      12: { cellWidth: 20 }, //panno\n      13: { cellWidth: 22 },\n      14: { cellWidth: 20 },\n      15: { cellWidth: 20 },\n      16: { cellWidth: 30 },\n      17: { cellWidth: 20 },\n    },\n    styles: {\n      fontSize: 10,\n      theme: \"grid\",\n    },\n    headStyles: {\n      lineWidth: 0.5,\n      fontSize: 10,\n      fontStyle: \"bold\",\n      fillColor: \"#f9c46b\",\n      lineColor: \"#ffffff\",\n    },\n    bodyStyles: {\n      fillColor: \"#e3e3e3\",\n      lineWidth: 0.5,\n      lineColor: \"#ffffff\",\n    },\n  });\n\n  //save the doc with filename\n  doc.save(pdfName);\n};\n\nfunction addStyle(workbookBlob, dataInfo) {\n  return XlsxPopulate.fromDataAsync(workbookBlob).then((workbook) => {\n    workbook.sheets().forEach((sheet) => {\n      sheet.usedRange().style({\n        fontFamily: \"Arial\",\n        verticalAlignment: \"center\",\n      });\n\n      alphabetList.forEach((name) => {\n        sheet.column(name).width(18);\n      });\n\n      sheet.range(dataInfo.titleRange).merged(true).style({\n        bold: true,\n        horizontalAlignment: \"center\",\n        verticalAlignment: \"center\",\n      });\n\n      sheet.range(dataInfo.theadRange).style({\n        fill: \"edd2cb\",\n        bold: false,\n        horizontalAlignment: \"center\",\n      });\n\n      sheet.range(dataInfo.tbodyRange).style({\n        horizontalAlignment: \"left\",\n        fill: \"f1e8e6\",\n      });\n\n      sheet.range(dataInfo.tableRange).style({\n        border: {\n          style: \"thin\",\n          color: \"000000\",\n          direction: \"both\",\n        },\n      });\n    });\n\n    return workbook\n      .outputAsync()\n      .then((workbookBlob) => URL.createObjectURL(workbookBlob));\n  });\n}\n\nfunction handleExport({ finalData, columnLength }) {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n\n  //create a sheet\n  const workSheet = XLSX.utils.json_to_sheet(finalData, {\n    skipHeader: true,\n  });\n\n  //create a workbook\n  const workBook = XLSX.utils.book_new();\n\n  //append sheet to workbook\n  XLSX.utils.book_append_sheet(workBook, workSheet, \"Staff List\");\n\n  const excelBuffer = XLSX.write(workBook, { bookType: \"xlsx\", type: \"array\" });\n  const workbookBlob = new Blob([excelBuffer], { type: fileType });\n  const dataInfo = {\n    titleCell: \"A2\",\n    titleRange: `A1:B2`,\n\n    theadRange: `A3:${alphabetList[columnLength - 1]}3`, //table header from A3:S3\n    tbodyRange: `A4:${alphabetList[columnLength - 1]}${finalData.length}`, //table body from A4:S[total item]\n    tableRange: `A3:${alphabetList[columnLength - 1]}${finalData.length}`, //from table head A3:S[total item]\n  };\n  return addStyle(workbookBlob, dataInfo);\n}\n\nexport const downloadExcelPopulate = ({ data, sheetName, fileName }) => {\n  let columnKeys = [];\n  for (const keys in data[0]) {\n    columnKeys.push(keys);\n  }\n\n  const tableHead = {};\n  const table = [];\n  for (let i = 0; i < columnKeys.length; i++) {\n    const keys = alphabetList[i];\n    tableHead[keys] = columnKeys[i];\n  }\n  table.push(tableHead);\n\n  const title = [{ A: \"Details:\" }, {}];\n  const finalData = [...title, ...table];\n\n  let obj = {};\n  data.forEach((element, index) => {\n    for (let key in tableHead) {\n      const index = tableHead[key];\n      obj[key] = element[index];\n    }\n    finalData.push({ ...obj });\n  });\n\n  const res = {\n    finalData,\n    columnLength: columnKeys.length,\n    sheetName,\n  };\n\n  handleExport(res).then((url) => {\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", url);\n    downloadAnchorNode.setAttribute(\"download\", fileName);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  });\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport MaterialTable from \"@material-table/core\";\nimport { Icon } from \"@iconify/react\";\nimport { fincoDefault } from \"src/axios/axiosinstance\";\nimport { downloadPdf, downloadExcelPopulate } from \"../../globalfun/globalfun\";\nimport { useSelector } from \"react-redux\";\nimport { CContainer } from \"@coreui/react\";\nconst Tables = ({ data }) => {\n  const columns = [\n    { title: \"Id\", field: \"StaffId\" },\n    { title: \"FirstName\", field: \"Firstname\" },\n    { title: \"LastName\", field: \"Lastname\" },\n    { title: \"Code\", field: \"Code\" },\n    { title: \"Dob\", field: \"Dob\" },\n    { title: \"MaritalStatus\", field: \"MaritalStatus\" },\n    { title: \"Mobile\", field: \"Mobile\" },\n    { title: \"Email\", field: \"Email\" },\n    { title: \"BloodGroup\", field: \"BloodGroup\" },\n    { title: \"JoinDate\", field: \"JoinDate\" },\n    { title: \"JobType\", field: \"JobType\" },\n    { title: \"StaffGroup\", field: \"StaffGroup\" },\n    { title: \"PanNo\", field: \"PanNo\" },\n    { title: \"Gender\", field: \"Gender\" },\n    { title: \"District\", field: \"District\" },\n    { title: \"Vdc\", field: \"Vdc\" },\n    { title: \"Tole\", field: \"Tole\" },\n    { title: \"WardNo\", field: \"WardNo\" },\n  ];\n\n  const excelData = {\n    data: data,\n    sheetName: \"Records\",\n    fileName: \"StaffList.xlsx\",\n  };\n  const pdfData = {\n    data: data,\n    pdfTitle: \"Staff Details:\",\n    pdfName: \"StaffList.pdf\",\n    columns: columns,\n  };\n  const officeName = useSelector((state) => state.dropDownData.selected.name);\n  const title = `Office Name:${officeName}`;\n\n  return (\n    <>\n      <CContainer className=\"p-2\">\n        <MaterialTable\n          title={title}\n          data={data}\n          columns={columns}\n          options={{\n            headerStyle: {\n              background: \"rgb(84,142,239)\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              position: \"sticky\",\n              top: 0,\n            },\n            maxBodyHeight: \"650px\",\n            sorting: true,\n            columnsButton: true,\n            // searchFieldVariant:\"outlined\",\n            paginationType: \"stepped\",\n            showFirstLastPageButtons: true,\n          }}\n          actions={[\n            {\n              icon: () => (\n                <Icon\n                  icon=\"mdi:file-excel\"\n                  width=\"25\"\n                  inline={true}\n                  id={1}\n                  color={\"green\"}\n                />\n              ),\n              tooltip: \"Export To Excel\",\n              isFreeAction: true,\n              onClick: (event) => {\n                // downloadExcel(excelData)\n                downloadExcelPopulate(excelData);\n              },\n            },\n            {\n              icon: () => (\n                <Icon\n                  icon=\"mdi:file-pdf-box\"\n                  color={\"red\"}\n                  width=\"26\"\n                  id={1}\n                  inline={true}\n                />\n              ),\n              tooltip: \"Download as pdf\",\n              isFreeAction: true,\n              onClick: (event) => {\n                downloadPdf(pdfData);\n              },\n            },\n          ]}\n        />\n      </CContainer>\n    </>\n  );\n};\n\nexport default Tables;\n","import {\n  CContainer,\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCardTitle,\n  CCardText,\n} from \"@coreui/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { fincoDefault } from \"src/axios/axiosinstance\";\nimport { getToken } from \"src/globalfun/globalfun\";\nimport Table from \"./table\";\nimport { useSelector } from \"react-redux\";\nimport { Icon } from \"@iconify/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilUser } from \"@coreui/icons\";\nconst Staff = () => {\n  const [data, setDatas] = useState([]);\n  const staffId = useSelector((state) => state.dropDownData.selected.id);\n  const token = getToken();\n  //   console.log(\"state\",staffId)\n\n  useEffect(() => {\n    // console.log(\"inside useffect staff\",staffId);\n    const getStaff = async () => {\n      try {\n        const response = await fincoDefault.get(\n          `/finco/api/auth/staff/list?officeId=${staffId}&statusId=1`,\n          {\n            headers: {\n              token: `${token}`,\n            },\n          }\n        );\n        setDatas(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getStaff();\n  }, [staffId]);\n\n  return (\n    <>\n      <CContainer>\n        <CRow>\n          <CCol xs=\"12\">\n            <CCard style={{ background: \"#60779f\" }}>\n              <CCardHeader component=\"h5\">\n                {/* <Icon icon=\"entypo:man\" width=\"50\" height=\"30\" inline={true} className=\"text-white\"/> */}\n                <CIcon\n                  icon={cilUser}\n                  customClassName=\"nav-icon\"\n                  height={30}\n                  width={50}\n                  style={{ color: \"white\" }}\n                />\n                <span className=\"d-inline-block text-white\">Staff Details</span>\n              </CCardHeader>\n              <CCardBody>\n                <Table data={data} />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </>\n  );\n};\n\nexport default Staff;\n"],"names":["fincoLogin","axios","baseURL","headers","fincoDefault","alphabetList","getToken","token","JSON","parse","localStorage","getItem","downloadPdf","data","pdfTitle","pdfName","columns","console","log","doc","jsPDF","text","autoTable","body","map","col","dataKey","field","theme","columnStyles","cellWidth","styles","fontSize","headStyles","lineWidth","fontStyle","fillColor","lineColor","bodyStyles","save","handleExport","finalData","columnLength","workSheet","XLSX","skipHeader","workBook","excelBuffer","bookType","type","workbookBlob","dataInfo","XlsxPopulate","then","workbook","sheets","forEach","sheet","usedRange","style","fontFamily","verticalAlignment","name","column","width","range","titleRange","merged","bold","horizontalAlignment","theadRange","fill","tbodyRange","tableRange","border","color","direction","outputAsync","URL","createObjectURL","addStyle","Blob","titleCell","length","downloadExcelPopulate","sheetName","fileName","columnKeys","keys","push","tableHead","table","i","A","obj","element","index","key","url","downloadAnchorNode","document","createElement","setAttribute","click","remove","title","excelData","pdfData","officeName","useSelector","state","dropDownData","selected","className","options","headerStyle","background","fontWeight","position","top","maxBodyHeight","sorting","columnsButton","paginationType","showFirstLastPageButtons","actions","icon","inline","id","tooltip","isFreeAction","onClick","event","useState","setDatas","staffId","useEffect","getStaff","response","xs","component","cilUser","customClassName","height"],"sourceRoot":""}